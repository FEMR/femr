name: Generate Installer and Dispatch On Release

on:
  release:
    types: [published]

jobs:
  build_and_push_image:
    # Only runs build on PRs.
    # Only does linux/amd64 build do to speed. Once Github adds more ARM runners, we can add more platforms.

    name: Build and Push Image
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: true
      matrix:
        platform: [linux/amd64] # Add linux/arm64 when more runners are available.

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_EMAIL }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Caches dependencies separately for each platform.
      - name: Cache Docker Dependencies
        uses: actions/cache@v3
        with:
          path: |
            root/.ivy2
            root/.sbt
          key: sbt-${{ runner.os }}-${{matrix.platform}}-${{ hashFiles('**/build.sbt', '**/project/*.sbt') }}
          restore-keys: |
            sbt-${{ runner.os }}-${{matrix.platform}}

      # Injects the cache into the Docker build. Path is based on cache path in Dockerfile.
      - name: Inject sbt cache into Docker
        uses: reproducible-containers/buildkit-cache-dance@v3.1.0
        with:
          cache-map: |
            {
              "root/.ivy2": "/root/.ivy2",
              "root/.sbt": "/root/.sbt"
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}

      - name: Strip leading 'v' from tag
        id: tag
        run: |
          RAW_TAG="${{ github.event.release.tag_name }}"
          STRIPPED_TAG="${RAW_TAG#v}"
          echo "stripped_tag=$STRIPPED_TAG" >> $GITHUB_OUTPUT

      - name: Build Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=${{ steps.tag.outputs.stripped_tag}}
          push: true
          tags: teamfemrdev/teamfemr:latest

  # This job sends a repository dispatch event to the installer repository to generate an installer
  # and upload it to s3 when a release is published.
  send_dispatch:
    name: Send Dispatch
    runs-on: ubuntu-latest
    steps:
      - name: Send Dispatch
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT }}
          repository: FEMR/installer-femr
          event-type: generate-installer
          client-payload: '{"release": "${{ steps.tag.outputs.stripped_tag }}"}'
